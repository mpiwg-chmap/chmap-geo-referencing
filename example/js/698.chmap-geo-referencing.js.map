{"version":3,"file":"698.chmap-geo-referencing.js","mappings":"+MAGQA,EAAcC,EAAAA,cAAAA,UAEhBC,EAAoB,IAAIC,EAAAA,QAAAA,kBAE1BC,EAAQ,KAERC,EAAY,KAEZC,EAAa,KAEjB,SAASC,EAAiBC,EAAKC,EAAOC,EAAIC,GACtCT,EAAkBU,GAAGJ,EAAKC,EAAOC,EAAIC,GA4DzC,SAASE,EAAKC,GAzDd,IAEUC,EAyDFX,KAzDEW,EAAMC,SAASC,cAAc,QAuB/BC,UArBM,kuBAuBVF,SAASG,KAAKC,OAAOL,GAMzB,SAA+BA,GAE3BT,EAAaS,EAAIM,cAAc,qBAE/BhB,EAAYU,EAAIM,cAAc,aAEpBC,OAAS,SAACC,GAChBjB,EAAWkB,MAAMC,QAAU,QAG/B,IAAMC,EAAcX,EAAIY,WAExBvB,EAAQ,IAAIJ,EAAU0B,GAMtBA,EAAanB,iBAAiB,uBAAuB,WACjDL,EAAkB0B,KAAK,SAAUF,MAvBrCG,CAAsBd,IAkCtBT,EAAWkB,MAAMC,QAAU,QAE3BpB,EAAUyB,IAAMhB,EAEhBV,EAAMS,OAENX,EAAkB0B,KAAK,QAASxB,EAAM2B","sources":["webpack://chmapGeoReferencing/./src/js/floating-panel/big-image-panel.js"],"sourcesContent":["\nimport { Commons, BootstrapWrap } from \"@chmap/utilities\";\n\nconst { Offcanvas } = BootstrapWrap;\n\nconst localEventEmitter = new Commons.EventEmitterClass();\n\nlet panel = null;\n\nlet bigImgDom = null;\n\nlet loadingDom = null;\n\nfunction addEventListener(obj, types, fn, context) {\n    localEventEmitter.on(obj, types, fn, context);\n}\n\nfunction createUI(){\n\n    const div = document.createElement('div');\n\n    const html =\n`<div \n     class=\"offcanvas offcanvas-end\"\n     style=\"width:40%;z-index:9997;\"\n     data-bs-scroll=\"true\"\n     data-bs-backdrop=\"false\"\n     tabindex=\"-1\"\n     aria-labelledby=\"offcanvasScrollingLabel\">\n    <div class=\"offcanvas-header pb-0\">\n        <h5 class=\"offcanvas-title\"></h5>\n        <i class=\"bi bi-chevron-right btn-outline-success px-1\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\" ></i>\n    </div>\n    <div class=\"offcanvas-body\" style=\"padding-top:0.5rem;\">\n       <div class=\"big-img-loading\">\n         <span class=\"spinner-grow spinner-grow-sm text-success\" role=\"status\" aria-hidden=\"true\"></span>\n         Loading...\n       </div>\n       <img class=\"big-img\" src=\"about:blank\"/>\n    </div>\n</div>`;\n\n    div.innerHTML = html;\n\n    document.body.append(div);\n\n    bindPointersAndEvents(div);\n\n}\n\nfunction bindPointersAndEvents(div) {\n\n    loadingDom = div.querySelector('.big-img-loading');\n\n    bigImgDom = div.querySelector('.big-img');\n\n    bigImgDom.onload = (e) => {\n        loadingDom.style.display = 'none';\n    }\n\n    const offCanvasDom= div.firstChild;\n\n    panel = new Offcanvas(offCanvasDom);\n\n    // offCanvasDom.addEventListener('shown.bs.offcanvas', () => {\n    //     localEventEmitter.emit('shown', offCanvasDom);\n    // });\n\n    offCanvasDom.addEventListener('hidden.bs.offcanvas', () => {\n        localEventEmitter.emit('hidden', offCanvasDom);\n    });\n\n}\n\nfunction show(imageURL){\n\n    if(!panel){\n        createUI();\n    }\n\n    loadingDom.style.display = 'block';\n\n    bigImgDom.src = imageURL;\n\n    panel.show();\n\n    localEventEmitter.emit('shown', panel._element);\n}\n\nexport {\n    show,\n    addEventListener as on,\n}\n"],"names":["Offcanvas","BootstrapWrap","localEventEmitter","Commons","panel","bigImgDom","loadingDom","addEventListener","obj","types","fn","context","on","show","imageURL","div","document","createElement","innerHTML","body","append","querySelector","onload","e","style","display","offCanvasDom","firstChild","emit","bindPointersAndEvents","src","_element"],"sourceRoot":""}