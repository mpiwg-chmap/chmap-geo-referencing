{"version":3,"file":"785.chmap-geo-referencing.js","mappings":"kSAEMA,EAAoB,IAAIC,EAAAA,QAAAA,kBAE9B,SAASC,EAAiBC,EAAKC,EAAOC,EAAIC,GACtCN,EAAkBO,GAAGJ,EAAKC,EAAOC,EAAIC,GAGzC,SAASE,EAAcC,GAGnB,IAAMC,EAAQD,EAAUE,MAAM,GAE9B,QAAcC,IAAVF,EAAqB,CAErB,IAAMG,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,WAEZ,IAAMC,EAAOH,EAAOI,OAEhBC,EAAAA,mBAAAA,WAA8BF,GAQlChB,EAAkBmB,KAAK,uBAAwB,CAAEH,KAAAA,EAAMI,KAAM,YALzDpB,EAAkBmB,KAAK,YAAa,wCAUrB,SAFDT,EAAMW,KAAKC,MAAM,KAAK,GAAGC,cAG3CV,EAAOW,WAAWd,EAAO,SAGzBV,EAAkBmB,KAAK,YAAa,uCAGxCV,EAAUgB,MAAQ,IAK1B,SAASC,EAAeC,EAAKC,GAEP,KAAf,IAAAD,GAAG,KAAHA,IAIHE,MAAMF,EAFY,CAAEG,OAAQ,QAG3BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,GAAKD,EAAW,WAAe,CAACE,IAAKF,EAASG,YACxEJ,MAAK,SAAAC,GAAQ,OAAIA,EAAShB,UAC1Be,MAAK,SAAAf,GAAI,OAAIhB,EAAkBmB,KAAK,uBAAwB,CAAEH,KAAAA,EAAMI,KAAMQ,OAC1EQ,OAAM,SAAAC,GACHrC,EAAkBmB,KAAK,YAAakB","sources":["webpack://chmapGeoReferencing/./src/js/file-import/file-loader.js"],"sourcesContent":["import { Commons, BasicDataProcessor } from '@chmap/utilities';\n\nconst localEventEmitter = new Commons.EventEmitterClass();\n\nfunction addEventListener(obj, types, fn, context){\n    localEventEmitter.on(obj, types, fn, context);\n}\n\nfunction loadLocalFile(fileInput){\n\n    //only process one file.\n    const aFile = fileInput.files[0];\n\n    if (aFile !== undefined) {\n\n        const reader = new FileReader();\n\n        reader.onload = () => {\n\n            const text = reader.result;\n\n            if(!BasicDataProcessor.isIIIFFile(text)){\n\n                //TODO: i18n\n                localEventEmitter.emit('exception', \"Only IIIF manifest file is allowed!\");\n                return;\n\n            }\n\n            localEventEmitter.emit('iiifManifestFileRead', { text, type: 'unknown'});\n        }\n\n        const extensionName = aFile.name.split(\".\")[1].toLowerCase();\n\n        if ( extensionName === \"json\") {\n            reader.readAsText(aFile, \"UTF-8\");\n        } else {\n            //TODO: i18n\n            localEventEmitter.emit('exception', \"Only IIIF manifest file is allowed!\");\n        }\n\n        fileInput.value = '';\n    }\n\n}\n\nfunction loadOnlineFile(url, fileType){\n\n    if(url.trim() === '') return;\n\n    const fetchOpts = { method: 'GET' };\n\n    fetch(url, fetchOpts)\n    .then(response => response.ok ? response : Promise.reject({err: response.status}))\n    .then(response => response.text())\n    .then(text => localEventEmitter.emit('iiifManifestFileRead', { text, type: fileType }))\n    .catch(error => {\n        localEventEmitter.emit('exception', error);\n    });\n\n}\n\nexport {\n    loadLocalFile,\n    loadOnlineFile,\n    addEventListener as on,\n}\n\n/* Events\n\n    { name: 'iiifManifestFileRead', params: { text, type }}\n    { name: 'exception', params: String }\n\n */\n"],"names":["localEventEmitter","Commons","addEventListener","obj","types","fn","context","on","loadLocalFile","fileInput","aFile","files","undefined","reader","FileReader","onload","text","result","BasicDataProcessor","emit","type","name","split","toLowerCase","readAsText","value","loadOnlineFile","url","fileType","fetch","method","then","response","ok","err","status","catch","error"],"sourceRoot":""}